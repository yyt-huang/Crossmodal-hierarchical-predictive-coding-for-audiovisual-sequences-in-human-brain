function [P1_A,P1_V,P2_A,P2_V,PE1_A,PE1_V,PE2_A,PE2_V]= crossmodal_predictive_coding_local_global(Model,Trialratio, Sequencetype);

% Input:
% Model: 1 for Model 1, 2 for Model 2, 3 for Model 3
% Trial ratio: [AAA, AAV, VVV, VVA] e.q. [4/6 1/6 1/6, 0, 0, 0];
% Sequence type: 1 for AAA or VVV seuqnece, 2 for AAV or VVV sequence


%% Check 
if sum(Trialratio(1:2)) ==1
    SP = Trialratio(1:2);
elseif sum(Trialratio(3:4)) ==1
    SP = Trialratio(3:4);
else
     disp('The sum of SP should be 1.')   
     return
end

%% TP and SP
n=3; 
if Model ==1
    
    SPxx= SP(1);
    SPxy= 0;
    SPxo= SP(2);

    TNx=(n-1)*SPxx +(n-2)*(SPxo + SPxy); % calculating overall transitions from A to A in Blocks 1 and 2
% or overall transitions from V to V in Blocks 3 and 4

    TNy=0;% calculating overall transitions from A to V in Blocks 1 and 2
% or overall transitions from V to A in Blocks 3 and 4

elseif Model ==2
    SPxx= SP(1);
    SPxy= SP(2);
    SPxo= 0;
    TNx=(n-1)*SPxx +(n-2)*(SPxo + SPxy);
    TNy=0;
    TNo=SPxy;
    
elseif Model ==3 
    SPxx= SP(1);
    SPxy= SP(2);
    SPxo= 0;
    TNx=(n-1)*SPxx +(n-2)*(SPxo + SPxy);
    TNy=SPxy;
end
% transition probability
TPx=TNx/(TNx+1);
TPy=TNy/(TNx+1);


%% P1 and P2

% Take sequences AAV and AAA in Block 1 for example,
% the prediction error at the first level at the A stream (PE1_A) is 1 – P1_A when the last A in AAA is received 
% and 0 – P1_A when AAV is received (no third A). The mean-squared prediction errors (PE1_A) is calculated by 
% considering occurrences of A-to-A transitions (TP_AtoA) and no A-to-A transitions (1- TP_AtoA), and the product is: 
% TP_AtoA * (1-P1_A)^2 + (1-TP_AtoA) * (0-P1_A)^2

% When the minimum of the mean of squared prediction errors occurs, 
% P1_A = TP_AtoA

% Following the same fashion
% In Blocks 1 and 2 
% P1_A = TP_AtoA; P1_V = TP_AtoV

% In Blocks 3 and 4 
% P1_V = TP_VtoV; P1_A = TP_VtoA

% P1
P1x=TPx; 
P1y=TPy;

% At the second level, PE2A is PE1A – P2, and the mean of squared prediction errors (PE2A) is 
% P2_A = SP_AAA * (|1-P1_A| - P2_A)^2 + (1-SP_AAA) * (|0-P1_A| - P2_A)^2
% When the minimums occur and lead to:
% P2_A = SP_AAA * (|1-P1_A|) + (1-SP_AAA) * P1_A

% Following the same fashion
% In Blocks 1 and 2 
% P2_A = SP_AAA * (|1-P1_A|) + (1-SP_AAA) * P1_A
% P2_V = SP_AAV * (|1-P1_V|) + (1-SP_AAV) * P1_V


% In Blocks 3 and 4 
% P2_V = SP_VVV * (|1-P1_V|) + (1-SP_VVV) * P1_V
% P2_A = SP_VVA * (|1-P1_A|) + (1-SP_VVA) * P1_A
                             
% P2
P2x=SPxx*(abs(1-P1x))+(1-SPxx)*P1x;
P2y=SPxy*(abs(1-P1y))+(1-SPxy)*P1y;
                

%% PE1 and PE2
if sequencetype ==1
s= [1,0];
elseif sequencetype ==2
s = [0,1];
end

%PE1
PE1= abs(s - [P1x P1y]);

PE1x=PE1(1);
PE1y=PE1(2);


%PE2
PE2= abs(PE1 - [P2x P2y]);

PE2x=PE2(1);
PE2y=PE2(2);

%% assign

if sum(SP(1:3)) ==1

    P1_A = P1x; 
    P1_V = P1y; 
    P2_A = P2x; 
    P2_V = P2y; 
    
    PE1_A = PE1x; 
    PE1_V = PE1y;
    PE2_A = PE2x;
    PE2_V = PE2y;
    
elseif sum(SP(4:6)) ==1
    
    P1_A = P1y; 
    P1_V = P1x; 
    P2_A = P2y; 
    P2_V = P2x; 
    
    PE1_A = PE1y; 
    PE1_V = PE1x;
    PE2_A = PE2y;
    PE2_V = PE2x;
end